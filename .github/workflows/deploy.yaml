name: Backend CI/CD

on:
  push:
    tags:
      - 'v*.*.*' # 监听语义化版本号，如 v1.0.0
  pull_request:
    branches: [ master,  ]

env:
  DOCKER_REGISTRY: crpi-qcm6mnyghyg601yj.cn-shenzhen.personal.cr.aliyuncs.com
  DOCKER_IMAGE_NAME: hk-movie-helper/hk-movie-helper-backend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test
      env:
        DATABASE_URL: mysql://root:test@localhost:3306/test_db

    - name: Run linting
      run: npm run lint

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=tag ,enable=true
        flavor: |
          latest=false

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    #  生成 .env.remote
    - name: Generate .env.remote with image name
      run: |
          echo "FRONTEND_IMAGE_PROD=$(echo '${{ steps.meta.outputs.tags }}' | cut -d',' -f1)" > .env.remote
      shell: bash  

    # 上传 .env.remote 到服务器
    - name: Upload .env.remote to server
      uses: appleboy/scp-action@v0.1.4
      with: 
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ".env.remote"
          target: "/home/deploy/backend"

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /home/deploy/backend
          chmod +x deploy.sh
            ./deploy.sh prod
